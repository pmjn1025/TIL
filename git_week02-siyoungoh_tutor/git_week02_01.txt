-핵심 쏙쏙 깃 2주차 강의내용 중-

-총 정리 개념-

협업할 때는 아래의 단계를 따릅니다.

1단계. 누가 이 작업 할 것인지 정한다. - Issue
2단계. 각자 맡은 것을 작업한다. - Branch 
--> 중요!!! 브랜치는 각자의 기능을 담당한
     따라서 브랜치는 브랜치대로 나누고 항상 해당 기능의 브랜치로 "체크아웃 했는지 확인한다."

--> 1) 항상 파일 작성시에는 기종의 동일한 폴더가 있으면 종료한후 해당 브랜치에 체크아웃 되어있는지 확인 후 해당 브랜치의
        탐색기를 통해 폴더를 열고 파일을 생생, 수정, 삭제등의 작업을 진행하고 진행이 끝난 폴더는 저장 후 파일을 종료한 후
        사용 폴더를 종료한다. 헷갈림 방지. 
        튜터님 말씀 새기기 : git은 버전관리 도구임 동시에 협업도구이다. 내가 헷갈리면 다른 사람도 100% 헷갈린다. 

--> 2) 메인 브랜치에 check out한뒤, 머지 전이면 놔두고 머지 후면 삭제 한다. 

3단계. 각자 작업을 프로젝트에 합친다. - merge
(경우에 따라). 작업한 내용을 리뷰하고 최종적으로 프로젝트에 반영한다. - PR 후 merge
--> merge confilict : 
     2개 이상의 브랜치 중 하나의 브랜치가 먼저 메인과 머지가 되고 나머 지 브랜치 중
     먼저 메인에 머지된 동일한 파일을 수정한 경우 소스트리에서 동일한 파일중 어떤 것을 커밋해야 될지 물어보는 것이다.
     튜터님께서 강의하셨던 것처럼 오류라고 생각하지 말고 묻는 것이라고 생각하자.

-->작업이 끝난 브랜치들과 merge 하기전에 main브랜치에 반드시 먼저 check out한다. main 브랜치 클릭후 병함 버튼을 누르고
    해당 브랜치 클릭 후 아래 체크 박스 중 3개를 클릭한다.
    머지 완료 되면 메인 브랜치에 check out된 것을 확인 후 머지가 완료된 브랜치는 삭제한다. 

==================================================================================================

issue 는 내가 할 작업, 기능 추가, 버그 리포트 등 여러 방식으로 사용할 수 있습니다.

협업을 하기 위해 issue 를 만들어 누가 작업할지 정하고, 브랜치를 만들어 작업할 공간을 나눕니다.

브랜치(branch)는 특정 commit 에서 갈라져나와 작업할 수 있습니다. 우리는 기능별로 이름을 만들어주어 브랜치에 작업해줍니다.

작업할 브랜치로 바꾸는 것을 체크아웃(checkout)이라고 합니다. 체크아웃된 브랜치에만 commit 이 반영됩니다

브랜치의 작업 내역 commit 들을 다른 branch 로 반영(합치기)는 것을 Merge(머지, 병합)이라고 부릅니다.
개발할 때는 기준이 되는 기본 브랜치를 정해놓고 해당 브랜치에 내용을 merge합니다. 우리는 main 브랜치에 작업 브랜치의 내용을 merge 했습니다.

브랜치명은 규칙을 가지고 잘 이름 지으면 프로젝트 관리가 쉬워집니다.

==================================================================================================

작업이 완료되면 작업한 브랜치는 보통 삭제해줍니다. 나중에 브랜치 설정이 꼬이는 것을 방지 할 수 있습니다.

각 작업 브랜치에서 작업할 때는 다른 브랜치의 영향을 받지 않고 독립적으로 작업할 수 있습니다.

 jjigae.txt 파일을 각각 브랜치에서 자유롭게 수정한 것처럼요!

Merge 하는 과정에서 같은 파일이 동일한 부분이 수정된 게 발견되면 Merge conflict(병합충돌) 이 발생합니다.

Git 이 똑똑하게 충돌을 파악할 수 있도록 파일 내용을 고쳐서 충돌 내역을 보여줍니다.

conflict 를 수정하려면 최종적으로 반영할 내역으로 고친 후에 merge commit 하면 됩니다.

tracking 한다는 것은 로컬 repo와 원격 repo의 특정 브랜치를 연결해주는 것입니다.

push와 pull 은 기본적으로 tracking(추적)되고 있는 브랜치를 기준으로 commit 내역을 반영합니다.

==================================================================================================
